require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Make code changes take effect immediately without server restart.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing.
  config.server_timing = true

  # Enable/disable Action Controller caching. By default Action Controller caching is disabled.
  # Run rails dev:cache to toggle Action Controller caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true
    config.public_file_server.headers = { "cache-control" => "public, max-age=#{2.days.to_i}" }
  else
    config.action_controller.perform_caching = false
  end

  # Change to :null_store to avoid any caching.
  config.cache_store = :memory_store

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Append comments with runtime information tags to SQL queries in logs.
  config.active_record.query_log_tags_enabled = true

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true

  # Annotate rendered view with file names.
  config.action_view.annotate_rendered_view_with_filenames = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true

  # Apply autocorrection by RuboCop to files generated by `bin/rails generate`.
  # config.generators.apply_rubocop_autocorrect_after_generate!







  # ####################@










  use_ssl = ENV['USE_SSL'] == 'false'
  use_real_smtp = ENV['USE_REAL_SMTP'] == 'true'

  if use_ssl
    config.force_ssl = true
    config.assume_ssl = true
  else
    config.force_ssl = false
    config.assume_ssl = false
  end

  puts "üåç Environnement: #{Rails.env}"
   puts "üîí SSL: #{use_ssl ? 'Activ√© (HTTPS)' : 'D√©sactiv√© (HTTP par d√©faut)'}"
   puts "üìß Email: #{use_real_smtp ? 'SMTP r√©el' : 'Letter Opener'}"
   puts "üåê URL: #{use_ssl ? 'https' : 'http'}://localhost:3000"

    # Make code changes take effect immediately without server restart.
    config.enable_reloading = true

    # Do not eager load code on boot.
    config.eager_load = false

    # Show full error reports.
    config.consider_all_requests_local = true

    # Enable server timing.
    config.server_timing = true
  # Options SSL avec exclusions pour certains chemins
  config.ssl_options = {
    redirect: {
      exclude: ->(request) {
        request.path =~ /health/ ||
        request.path =~ /assets/ ||
        request.path =~ /cable/
      }
    }
  }







  config.action_mailer.perform_deliveries = true
  config.action_mailer.raise_delivery_errors = true

  if use_real_smtp
      # SMTP r√©el Gmail (si USE_REAL_SMTP=true)
      config.action_mailer.delivery_method = :smtp
      config.action_mailer.smtp_settings = {
        address: "smtp.gmail.com",
        port: 587,
        domain: "gmail.com",
        authentication: "plain",
        enable_starttls_auto: true,
        user_name: ENV["GMAIL_USERNAME"],
        password: ENV["GMAIL_PASSWORD"]
      }
      puts "üìß SMTP Gmail configur√©"
  else
      # Letter Opener par d√©faut (emails dans le navigateur)
      config.action_mailer.delivery_method = :letter_opener
      puts "üìß Letter Opener activ√© (emails s'ouvrent dans le navigateur)"
  end

    # URLs pour les emails (adapt√©es selon SSL)
    config.action_mailer.default_url_options = {
      host: 'localhost',
      port: 3000,
      protocol: use_ssl ? 'https' : 'http'
    }

    config.stripe = {
       publishable_key: ENV['STRIPE_PUBLISHABLE_KEY'],
       secret_key: ENV['STRIPE_SECRET_KEY']
     }

     # Debug Stripe
     config.after_initialize do
       if ENV['STRIPE_SECRET_KEY'].present?
         Rails.logger.info "üîë Stripe configur√© en d√©veloppement"
       else
         Rails.logger.warn "‚ö†Ô∏è  Cl√©s Stripe manquantes"
       end
     end
  config.assets.check_precompiled_asset = false
end
